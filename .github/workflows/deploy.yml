name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    if: github.repository == 'hskhsmm/2025_SEASONTHON_TEAM_90_BE'

    # Docker를 사용해 임시 PostgreSQL 컨테이너 실행 (테스트용)
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: habiglow_user
          POSTGRES_PASSWORD: habiglow_password
          POSTGRES_DB: habiglow_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in $(seq 1 10); do
            nc -z localhost 5432 && break
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Build and Run Tests with Gradle
        env:
          # CI 단계에 필요한 환경 변수 (임시 DB에 연결)
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/habiglow_test_db
          SPRING_DATASOURCE_USERNAME: habiglow_user
          SPRING_DATASOURCE_PASSWORD: habiglow_password
          # JWT와 기타 설정은 Secrets에서 가져옴
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          JWT_ACCESS_EXPIRATION: ${{ vars.JWT_ACCESS_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ vars.JWT_REFRESH_EXPIRATION }}
          SWAGGER_SERVER_URL: ${{ vars.SWAGGER_SERVER_URL }}
        run: ./gradlew build

      # CI가 성공하고 main 브랜치에 푸시될 때만 배포 실행
      - name: Deploy to EC2
        if: github.ref == 'refs/heads/main'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # SSH 키 파일 생성 및 권한 설정
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # SCP를 사용해 JAR 파일 EC2로 전송
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./build/libs/habiglow-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/
          
          # SSH 접속 및 애플리케이션 재시작
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 원격 서버에서 실행할 명령어들
            sudo pkill -f "java -jar" || true # 기존 애플리케이션 종료
          
            # 새 애플리케이션 시작 (환경 변수 적용)
            nohup java -jar -Dspring.profiles.active=prod,dummy-data -Dspring.datasource.url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ vars.DB_PORT }}/${{ secrets.DB_NAME }} -Dspring.datasource.username=${{ secrets.DB_USERNAME }} -Dspring.datasource.password=${{ secrets.DB_PASSWORD }} -DJWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} -DOPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} ~/habiglow-0.0.1-SNAPSHOT.jar > ~/nohup.out 2>&1 &
          
            # Nginx 재시작
            sudo systemctl restart nginx
          EOF